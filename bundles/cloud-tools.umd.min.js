!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("@angular/material-moment-adapter"),require("@angular/material"),require("@angular/common"),require("@angular/forms"),require("ngx-captcha")):"function"==typeof define&&define.amd?define("cloud-tools",["exports","@angular/core","@angular/material-moment-adapter","@angular/material","@angular/common","@angular/forms","ngx-captcha"],t):t(e["cloud-tools"]={},e.ng.core,e.ng["material-moment-adapter"],e.ng.material,e.ng.common,e.ng.forms,e.ngxCaptcha)}(this,function(e,t,r,n,l,o,a){"use strict";var i=function(){function e(){}return e.prototype.ngOnInit=function(){if(-1===["text","email","select","password","textarea","datetime","number","multiple_select","button","switch","recaptcha"].indexOf(this.field.type))throw"Unable to render the field '"+this.field.name+"' with the field type : '"+this.field.type+"'. This type is not supported.";if(!(this.group.get(this.field.name)instanceof o.AbstractControl))throw'Unable to retreive the field "'+this.field.name+'" from the [group] provided to the "app-fields" component.';this[this.field.name]=this.field.control},e.decorators=[{type:t.Component,args:[{selector:"cloud-fields",template:'<ng-container [formGroup]="group">\r\n\t\x3c!-- text field field --\x3e\r\n\t\r\n\t<mat-form-field [appearance]="field.appearance || \'standard\'" *ngIf="[ \'text\', \'password\', \'email\' ].indexOf( field.type ) != -1" class="example-full-width w-100">\r\n\t\t<mat-label>{{ field.label }}</mat-label>\r\n\t\t<input [readonly]="field.readonly" [type]="field.type" [formControlName]="field.name" matInput [placeholder]="field.label" [value]="field.value ? field.value : \'\'">\r\n\t\t<mat-hint *ngIf="field.control.valid || field.control.untouched">{{ field.description }}</mat-hint>\r\n\t\t<mat-error *ngIf="field.control.invalid && field.control.touched">\r\n\t\t\t<span *ngIf="field.control.errors.required">This field is required<br></span>\r\n\t\t\t<span *ngIf="field.control.errors.email">This field is not a valid email<br></span>\r\n\t\t\t<span *ngIf="field.control.errors.minlength">this field doesn\'t match the required length : {{field.control.errors.minlength.requiredLength }}<br></span>\r\n\t\t\t<span *ngIf="field.control.errors.matches">this field doesn\'t match the field : {{ field.control.errors.matches.formControlName }}<br></span>\r\n\t\t\t<span *ngIf="field.control.errors.number">this field require a valid number<br></span>\r\n\t\t\t<span *ngFor="let error of field?.errors">{{ error }}<br></span>\r\n\t\t</mat-error>\r\n\t</mat-form-field>\r\n\t\r\n\t\x3c!-- date time field --\x3e\r\n\t\r\n\t<mat-form-field [appearance]="field.appearance || \'standard\'" *ngIf="field.type == \'datetime\'" class="w-100">\r\n\t\t<mat-label>{{ field.label }}</mat-label>\r\n\t\t<input [readonly]="field.readonly" [formControlName]="field.name" matInput [matDatepicker]="picker" [placeholder]="field.label">\r\n\t\t<mat-datepicker-toggle matSuffix [for]="picker"></mat-datepicker-toggle>\r\n\t\t<mat-datepicker #picker startView="year" [startAt]="field.data.startDate"></mat-datepicker>\r\n\t\t<mat-hint *ngIf="field.control.valid || field.control.untouched">{{ field.description }}</mat-hint>\r\n\t\t<mat-error *ngIf="field.control.invalid && field.control.touched">\r\n\t\t\t<span *ngIf="field.control.errors.required">This field is required<br></span>\r\n\t\t\t<span *ngIf="field.control.errors.email">This field is not a valid email<br></span>\r\n\t\t\t<span *ngIf="field.control.errors.minlength">this field doesn\'t match the required length : {{field.control.errors.minlength.requiredLength }}<br></span>\r\n\t\t\t<span *ngIf="field.control.errors.matches">this field doesn\'t match the field : {{ field.control.errors.matches.formControlName }}<br></span>\r\n\t\t\t<span *ngIf="field.control.errors.number">this field require a valid number<br></span>\r\n\t\t\t<span *ngFor="let error of field?.errors">{{ error }}<br></span>\r\n\t\t</mat-error>\r\n\t</mat-form-field>\r\n\t\r\n\t\x3c!-- select field --\x3e\r\n\t\r\n\t<mat-form-field [appearance]="field.appearance || \'standard\'" *ngIf="field.type == \'select\'" class="w-100">\r\n\t\t<mat-label>{{ field.label }}</mat-label>\r\n\t\t<mat-select [formControlName]="field.name" [placeholder]="field.label">\r\n\t\t\t<mat-option *ngFor="let option of field.options" [value]="option.value">\r\n\t\t\t{{ option.label }}\r\n\t\t\t</mat-option>\r\n\t\t</mat-select>\r\n\t\t<mat-hint *ngIf="field.control.valid || field.control.untouched">{{ field.description }}</mat-hint>\r\n\t\t<mat-error *ngIf="field.control.invalid && field.control.touched">\r\n\t\t\t<span *ngIf="field.control.errors.required">This field is required<br></span>\r\n\t\t\t<span *ngIf="field.control.errors.email">This field is not a valid email<br></span>\r\n\t\t\t<span *ngIf="field.control.errors.minlength">this field doesn\'t match the required length : {{field.control.errors.minlength.requiredLength }}<br></span>\r\n\t\t\t<span *ngIf="field.control.errors.matches">this field doesn\'t match the field : {{ field.control.errors.matches.formControlName }}<br></span>\r\n\t\t\t<span *ngIf="field.control.errors.number">this field require a valid number<br></span>\r\n\t\t\t<span *ngFor="let error of field?.errors">{{ error }}<br></span>\r\n\t\t</mat-error>\r\n\t</mat-form-field>\r\n\t\r\n\t<mat-form-field [appearance]="field.appearance || \'standard\'" *ngIf="field.type == \'multiple_select\'" multiple class="w-100">\r\n\t\t<mat-label>{{ field.label }}</mat-label>\r\n\t\t<mat-select [formControlName]="field.name" [placeholder]="field.label">\r\n\t\t\t<mat-option *ngFor="let option of field.options" [value]="option.value">\r\n\t\t\t{{ option.label }}\r\n\t\t\t</mat-option>\r\n\t\t</mat-select>\r\n\t\t<mat-hint *ngIf="field.control.valid || field.control.untouched">{{ field.description }}</mat-hint>\r\n\t\t<mat-error *ngIf="field.control.invalid && field.control.touched">\r\n\t\t\t<span *ngIf="field.control.errors.required">This field is required<br></span>\r\n\t\t\t<span *ngIf="field.control.errors.email">This field is not a valid email<br></span>\r\n\t\t\t<span *ngIf="field.control.errors.minlength">this field doesn\'t match the required length : {{field.control.errors.minlength.requiredLength }}<br></span>\r\n\t\t\t<span *ngIf="field.control.errors.matches">this field doesn\'t match the field : {{ field.control.errors.matches.formControlName }}<br></span>\r\n\t\t\t<span *ngIf="field.control.errors.number">this field require a valid number<br></span>\r\n\t\t\t<span *ngFor="let error of field?.errors">{{ error }}<br></span>\r\n\t\t</mat-error>\r\n\t</mat-form-field>\r\n\t\r\n\t\x3c!-- textarea field --\x3e\r\n\t\r\n\t<mat-form-field [appearance]="field.appearance || \'standard\'" *ngIf="field.type == \'textarea\'" class="w-100">\r\n\t\t<mat-label>{{ field.label }}</mat-label>\r\n\t\t<textarea [formControlName]="field.name" matInput [placeholder]="field.label"></textarea>\r\n\t\t<mat-hint *ngIf="field.control.valid || field.control.untouched">{{ field.description }}</mat-hint>\r\n\t\t<mat-error *ngIf="field.control.invalid && field.control.touched">\r\n\t\t\t<span *ngIf="field.control.errors.required">This field is required<br></span>\r\n\t\t\t<span *ngIf="field.control.errors.email">This field is not a valid email<br></span>\r\n\t\t\t<span *ngIf="field.control.errors.minlength">this field doesn\'t match the required length : {{field.control.errors.minlength.requiredLength }}<br></span>\r\n\t\t\t<span *ngIf="field.control.errors.matches">this field doesn\'t match the field : {{ field.control.errors.matches.formControlName }}<br></span>\r\n\t\t\t<span *ngIf="field.control.errors.number">this field require a valid number<br></span>\r\n\t\t\t<span *ngFor="let error of field?.errors">{{ error }}<br></span>\r\n\t\t</mat-error>\r\n\t</mat-form-field>\r\n\t\r\n\t\x3c!-- text field field --\x3e\r\n\t\r\n\t<mat-form-field [appearance]="field.appearance || \'standard\'" *ngIf="[ \'number\' ].indexOf( field.type ) != -1" class="example-full-width w-100">\r\n\t\t<mat-label>{{ field.label }}</mat-label>\r\n\t\t<input [readonly]="field.readonly" [formControlName]="field.name" matInput type="number" [placeholder]="field.label" [value]="field.value ? field.value : \'\'">\r\n\t\t<mat-hint *ngIf="field.control.valid || field.control.untouched">{{ field.description }}</mat-hint>\r\n\t\t<mat-error *ngIf="field.control.invalid && field.control.touched">\r\n\t\t\t<span *ngIf="field.control.errors.required">This field is required<br></span>\r\n\t\t\t<span *ngIf="field.control.errors.email">This field is not a valid email<br></span>\r\n\t\t\t<span *ngIf="field.control.errors.minlength">this field doesn\'t match the required length : {{field.control.errors.minlength.requiredLength }}<br></span>\r\n\t\t\t<span *ngIf="field.control.errors.matches">this field doesn\'t match the field : {{ field.control.errors.matches.formControlName }}<br></span>\r\n\t\t\t<span *ngIf="field.control.errors.number">this field require a valid number<br></span>\r\n\t\t\t<span *ngFor="let error of field?.errors">{{ error }}<br></span>\r\n\t\t</mat-error>\t\t\r\n\t</mat-form-field>\r\n\r\n\t\x3c!-- switch field --\x3e\r\n\t<ng-container *ngIf="[ \'switch\' ].indexOf( field.type ) != -1">\r\n\t\t<mat-slide-toggle [formControlName]="field.name" [checked]="field.value">{{ field.label }}</mat-slide-toggle>\r\n\t\t<mat-error *ngIf="field.control.invalid && field.control.touched">\r\n\t\t\t<br>\r\n\t\t\t<span *ngIf="field.control.errors.required">This field is required<br></span>\r\n\t\t\t<span *ngIf="field.control.errors.email">This field is not a valid email<br></span>\r\n\t\t\t<span *ngIf="field.control.errors.minlength">this field doesn\'t match the required length : {{field.control.errors.minlength.requiredLength }}<br></span>\r\n\t\t\t<span *ngIf="field.control.errors.matches">this field doesn\'t match the field : {{ field.control.errors.matches.formControlName }}<br></span>\r\n\t\t\t<span *ngIf="field.control.errors.number">this field require a valid number<br></span>\r\n\t\t\t<span *ngFor="let error of field?.errors">{{ error }}<br></span>\r\n\t\t</mat-error>\r\n\t\t<br>\r\n\t\t<small *ngIf="field.control.valid || field.control.untouched">{{ field.description }}</small>\r\n\t\t<br>\r\n\t\t<br>\r\n\t</ng-container>\r\n\r\n\t\x3c!-- (reset)="handleReset()"\r\n\t(ready)="handleReady()"\r\n\t(load)="handleLoad()"\r\n\t[type]="type"\r\n\t[ngModelOptions]="{ standalone: true }"\r\n\t[badge]="badge"\r\n\t(success)="handleSuccess($event)"--\x3e\r\n\t\x3c!-- recaptcha field --\x3e\r\n\t<ng-container *ngIf="[ \'recaptcha\' ].includes( field.type )">\r\n\t\t<ngx-recaptcha2 #captchaElem\r\n\t\t\t[siteKey]="field.data.siteKey"\r\n\t\t\t[useGlobalDomain]="false"\r\n\t\t\ttype="image"\r\n\t\t\t[formControlName]="field.name">\r\n\t\t</ngx-recaptcha2>\r\n\t\t<mat-error *ngIf="field.control.invalid && field.control.touched">\r\n\t\t\t<br>\r\n\t\t\t<span *ngIf="field.control.errors.required">This field is required<br></span>\r\n\t\t\t<span *ngIf="field.control.errors.email">This field is not a valid email<br></span>\r\n\t\t\t<span *ngIf="field.control.errors.minlength">this field doesn\'t match the required length : {{field.control.errors.minlength.requiredLength }}<br></span>\r\n\t\t\t<span *ngIf="field.control.errors.matches">this field doesn\'t match the field : {{ field.control.errors.matches.formControlName }}<br></span>\r\n\t\t\t<span *ngIf="field.control.errors.number">this field require a valid number<br></span>\r\n\t\t\t<span *ngFor="let error of field?.errors">{{ error }}<br></span>\r\n\t\t</mat-error>\t\r\n\t</ng-container>\r\n\t\x3c!-- button --\x3e\r\n\t<button [type]="field.type" *ngIf="[ \'button\' ].indexOf( field.type ) !== -1" (click)="field.onClick( group )" mat-raised-button color="primary">{{ field.label }}</button>\r\n</ng-container>',styles:["mat-form-field{margin-bottom:10px;width:100%}"]}]}],e.ctorParameters=function(){return[]},e.propDecorators={field:[{type:t.Input,args:["field"]}],group:[{type:t.Input,args:["group"]}]},e}(),d=[n.MatCheckboxModule,n.MatDatepickerModule,n.MatFormFieldModule,n.MatInputModule,n.MatRadioModule,n.MatSelectModule,n.MatSliderModule,n.MatSlideToggleModule,n.MatMenuModule,n.MatSidenavModule,n.MatToolbarModule,n.MatCardModule,n.MatDividerModule,n.MatExpansionModule,n.MatGridListModule,n.MatListModule,n.MatTabsModule,n.MatButtonModule,n.MatIconModule,n.MatProgressSpinnerModule,n.MatProgressBarModule,n.MatRippleModule,n.MatDialogModule,n.MatSnackBarModule,n.MatPaginatorModule,n.MatSortModule,n.MatTableModule,r.MatMomentDateModule],f=function(){function e(){}return e.decorators=[{type:t.NgModule,args:[{imports:d,exports:d}]}],e}(),s=function(){function e(){}return e.decorators=[{type:t.NgModule,args:[{declarations:[i],imports:[f,l.CommonModule,o.ReactiveFormsModule,a.NgxCaptchaModule],exports:[i]}]}],e}();e.CloudToolsModule=s,e.ɵa=i,e.ɵb=f,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=cloud-tools.umd.min.js.map